
//NOTE CONFIG FILE NOT WORKING AS INTENDED, SEE ISSUE https://github.com/nextflow-io/nextflow/issues/2662
/*
The user provided config file can provide settings in addition to the the settings in the nextflow.config file.
Here's some examples on how you can write your own config file.
Command example with config file:
nextflow run main.nf -c usr_template.config
*/

/*
//Example of a simple user provided config file for running on HPC via SLURM
process.executor = 'slurm' //Send to SLURM instead of running locally
//getting a sneaking suspicion that this won't be correct since it couldn't determine nodes before. Need to test.
process.clusterOptions = { "-A <project> -p <partition> -n <nodes> -t <time> " } //job specifications for SLURM
queueSize = 10 //How many jobs nextflow is allowed to run in parallell
*/

/*
You can set the pipeline parameters within the config file instead of providing them on the command line like this:
*/
params {
	project = "sq_dir"
	samples = "/home/jay/squeezemeta/data/mock/mock.samples"
	fastq = "/home/jay/squeezemeta/data/mock/raw"
	threads = 12
}


/*
Different parts of the pipeline require different amounts of resources. You can specify if you want better resource
management by using the labels: short_time and medium_time.
First set how many jobs nextflow can run in parallell. It is good to have a high number here if you run your
computations on a cluster
*/

executor.queueSize = 100

/* It is also a good idea to set the work directory. This is where all temporary files will be stored, and is used if
your run is cancelled and you want to -resume without starting over. This can be deleted once your pipeline is finished.
*/
workDir = "sq_scratch"

process {
	//These settings will apply to a majority of the processes
	executor = 'slurm'
	clusterOptions = { '-A naiss2023-5-97' }
	cpus = params.threads
	queue = 'core' //This is the partition directive. Set it to core or node to match your requested cpus.
	time = '1h 15m'

    //Some of the processes are small enough that they can be run locally. That can be set like this:
    withLabel: short_time {
        executor = 'local'
        cpus = 1
    }

    /*  The medium time processes require some computation, but not as much time as the standard processes.
	You can set different cluster options for them like this: 
    */
    withLabel: medium_time {
	executor = 'slurm'
	clusterOptions = { '-A naiss2023-5-97' }
	cpus = { params.threads/2 }
	queue = 'core'
	time = '30m'
    }
}
